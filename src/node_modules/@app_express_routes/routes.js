const Router = require('express-promise-router')
const db = require('@app_express_routes/pgexpress')


async function fnAccessPoint(req, res) {

    const myURL = new URL('https://' + req.hostname + req.originalUrl);
    let ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;

    let idata = {
        cookies: req.cookies,
        body: req.body,
        query: req.query,
        method: req.method,
        pathname: myURL.pathname,
        ipclient: ip
    }

    let query = {
        name: idata.method,
        text: `SELECT api.fn_access_point($1::JSON)`,
        values: [JSON.stringify(idata)]
    }

    try {
        let respg = await db.query(query);
        let r;
        console.log(respg);

        if (respg.rows.length > 0) {
            r = respg.rows[0].fn_access_point;
            res.status(r.status).json(r.data);
        } else {
            res.status(204).json([]);
        }
    } catch (e) {
        console.error(e);
        res.status(500).json(e);
    }
}


async function AccessPoint(req, res) {

    //console.log('Full: https://'+req.host+req.originalUrl);
    const myURL = new URL('https://'+req.hostname+req.originalUrl);
    var r;
    var path = myURL.pathname;
    var datapost = req.body;
    var dataquery = req.query;
    var cookies = req.cookies;
    var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    console.log(req.cookies, path, JSON.stringify(cookies), ip, JSON.stringify(datapost), JSON.stringify(dataquery));
    var query = {
        name: path,
        text: `SELECT public.access_point($1::TEXT, $2::JSON, $3::inet, $4::JSON, $5::JSON)`,
        values: [path, JSON.stringify(cookies), ip, JSON.stringify(datapost), JSON.stringify(dataquery)]
    }

    try {
        var respg = await db.query(query);
        if (respg.rows.length > 0) {
            r = respg.rows[0].access_point;
            // El siguiente if es para setear el token en caso de haberlo
            if (r.data && r.data.token) {
                res.cookie('TOKEN_USER', r.data.token, {
                    maxAge: 900000,
                    httpOnly: true
                });
            }

            // Esta lÃ­nea es para enviar email en caso de registro correcto
            if (r.data && r.data.Register && r.data.idaccount > 0 && r.data.iduser > 0 && r.data.username) {
                await this.sendEmail(r.data.username, r.data.email_subject, r.data.email_text, r.data.email_html);
                r.data.username = null;
                r.data.email_subject = null;
                r.data.email_text = null;
                r.data.email_html = null;
            }

            res.status(r.status).json(r.data);
        } else {
            res.status(204).json([]);
        }
    } catch (e) {
        console.error(e);
        res.status(500).json(e);
    }
}

// create a new express-promise-router
// this has the same API as the normal express router except
// it allows you to use async functions as route handlers
const router = new Router()
// export our router to be mounted by the parent application
module.exports = router
router.all('/api/*', async (req, res) => {
    AccessPoint(req, res);
})